********* Users *********

Hierarchy Structure:
    User Class
        |--	ImmutableUser Class
        |		|--	Admin Class
        |
        |-- FacultyUser Class

    User Class:
        Fields:
            - final private UUID id: UUID v4 id
            - private String username
            - private byte[] password: an array of bytes of SHA512 encrypted password
            - private String firstName
            - private String lastName
            - private String email

        Methods:
            Constructors:
                - Takes all fields as parameter except id. It automatically generates a UUID v4
                    -  Takes password as String
                    -  Takes password as byte array
                - Takes all fields as parameter including id.
                    -  Takes password as String
                    -  Takes password as byte array

            Getters & Setters:
                - All Setters takes values as String except password, which has 2 overloaded method, one takes a byte array, another String
                - There's not setter for id.
                - All Getters returns the value as the data type of their respected fields.
                - All getter and setters throws appropriate exceptions.

            public boolean usernameEquals(String username):
                - Takes a username as String and returns boolean if it is matching with the user object's username.

            public boolean passwordEquals(String password):
                - Takes a password as String and returns boolean if it is matching with the user object's password.

            private void checkId(String id):
                - Takes a id as String and throws ValueCanNotBeNull or ValueCanNotBeEmpty Exception.

    ImmutableUser Class:
        Fields: None

        Methods:
            Constructors: Same as User Class that includes id.
            Setters: All setters from the User Class have been overrided to throw CannotChangeFields Exception

    public final Admin Class:
        Fields:
            - private static final Admin ADMIN_INSTANCE: Admin instance with hard coded values
            - public static final UUID ID: UUID v4 id of Admin instance
            - public static final String FIRST_NAME: first name of Admin instance
            - public static final String EMAIL: email of Admin instance

        Methods:
            Constructors:
                - One no parameterized private constructor that creates an Admin instance with hard coded values.

            public static boolean credentialsEquals(String username, String password):
                - Takes a username and password as String and returns boolean if it is matching with the Admin instance's credentials.

    public FacultyUser Class:
        Fields: None
        Methods:
            Constructors: Same as User Class that doesn't include id and takes password as String.

            public static boolean credentialsEquals(String username, String password):
                - Takes a username and password as String and returns boolean if it is matching with the FacultyUser's instance's credentials.


Design Choices:
    - User can be instantiated from the same package only as it's assumed all the "End User Classes" are in the same package.
    - id of each user is immutable and unique. So there's no setter method for id.
    - All the "End User Classes" can be instantiated from anywhere as it's assumed they will be needed by other packages.
    - User Class's field's accessibility are set accordingly to the above rules.
    - ImmutableUser Class overrides the setter methods as it needs to be immutable
    - Admin Class is an "End User Class" that is immutable and there is only one admin present. So it's made final to
      prevent instantiation from outside the class. It instantiates itself and sets the static fields accordingly. This is to create
      an abstraction that gives an impression of only one admin.